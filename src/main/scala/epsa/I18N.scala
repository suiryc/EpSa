package epsa

import suiryc.scala.util.{I18NWithCache, I18NWithPreference}

object I18N extends suiryc.scala.util.I18N("i18n.epsa") with I18NWithPreference with I18NWithCache {

  import epsa.Settings.prefs
  import suiryc.scala.settings.Preference
  import suiryc.scala.settings.Preference._

  override val pref = Preference.from("locale.code", "en")

  object Strings {
    // Titles, menu items, actions, ...
    def editSchemes = getString("Edit schemes")
    def editScheme = getString("Edit scheme")
    def editFunds = getString("Edit funds")
    def editFund = getString("Edit fund")
    def editUnavailabilityPeriods = getString("Edit unavailability periods")
    def newPayment = getString("New payment")
    def newTransfer = getString("New transfer")
    def newRefund = getString("New refund")
    def savings = getString("Savings")
    def savingsOnDate = getString("savings-on-date")
    def savingsOnDateTab = getString("savings-on-date.tab")
    def accountHistory = getString("Account history")
    def navHistory = getString("Net asset value history")
    def levies = getString("Levies")
    def importLevies = getString("Import levies")
    def importNAVHistory = getString("Import net asset value history")
    def purgeNAVHistory = getString("Purge net asset value history")
    def options = getString("Options")
    def selectDataStore = getString("Select data store")
    def exportRawAccountHistory = getString("Export raw account history")
    def importRawAccountHistory = getString("Import raw account history")

    // Labels, ...
    def na = getString("n/a")
    def available = getString("available")
    def scheme = getString("Scheme")
    def schemeColon = getString("Scheme:")
    def fund = getString("Fund")
    def fundColon = getString("Fund:")
    def availability = getString("Availability")
    def availabilityColon = getString("Availability:")
    def units = getString("Units")
    def unitsColon = getString("Units:")
    def vwap = getString("VWAP")
    def vwapColon = getString("VWAP:")
    def date = getString("Date")
    def dateColon = getString("Date:")
    def nav = getString("NAV")
    def navColon = getString("NAV:")
    def amount = getString("Amount")
    def invested = getString("Invested")
    def investedAmountColon = getString("Invested amount:")
    def gross = getString("Gross")
    def grossAmount = getString("Gross amount")
    def grossAmountColon = getString("Gross amount:")
    def leviesAmountColon = getString("Levies amount:")
    def net = getString("Net")
    def netAmountColon = getString("Net amount:")
    def gain = getString("Gain/Loss")
    def grossGainColon = getString("Gross gain/loss:")
    def grossPct = getString("Gross (%)")
    def grossGainPctColon = getString("Gross gain/loss (%):")
    def netGainColon = getString("Net gain/loss:")
    def netPct = getString("Net (%)")
    def netGainPctColon = getString("Net gain/loss (%):")
    def payment = getString("Payment")
    def transfer = getString("Transfer")
    def refund = getString("Refund")
    def oldValue = getString("Old value")
    def newValue = getString("New value")
    def spreadsheets = getString("Spreadsheets")
    def dataStore = getString("Data store")
    def event = getString("Event")
    def jsonFiles = getString("JSON files")

    // Messages (information, warning, error), ...
    def assetEventPaymentMain = getString("asset.event.payment.main")
    def assetEventPaymentDetails1 = getString("asset.event.payment.details.1")
    def assetEventTransferMain = getString("asset.event.transfer.main")
    def assetEventTransferDetails1 = getString("asset.event.transfer.details.1")
    def assetEventTransferDetails2 = getString("asset.event.transfer.details.2")
    def assetEventRefundMain = getString("asset.event.refund.main")
    def assetEventRefundDetails1 = getString("asset.event.refund.details.1")
    def assetEventSchemeRenamed = getString("asset.event.scheme.renamed")
    def assetEventFundRenamed = getString("asset.event.fund.renamed")
    def leviesEstimation = getString("levies.estimation")
    def pendingChanges = getString("confirmation.pending-changes")
    def confirmAction = getString("confirmation.action")
    def irreversibleAction = getString("confirmation.irreversible-action")
    def undoPending = getString("Undo all pending changes")
    def needRestart = getString("information.need-restart")
    def mandatoryField = getString("Mandatory field")
    def positiveValue = getString("Positive value expected")
    def valueLimit = getString("Value exceeds available quantity")
    def anteriorOpDate = getString("warning.anterior-operation-date")
    def anteriorAvailDate = getString("error.anterior-availability-date")
    def dstAmountDelta = getString("warning.dst-amount-delta")
    def unselectingNonEmptyResource = getString("warning.unselecting-nonempty-resource")
    def deleteAssociatedSchemes = getString("confirmation.delete-associated-schemes")
    def deleteAssociatedFunds = getString("confirmation.delete-associated-funds")
    def deleteUsedResource = getString("confirmation.delete-used-resource")
    def nameExists = getString("Name already exists")
    def nameEmpty = getString("Name cannot be empty")
    def schemeNotEmpty =getString("Scheme is not empty")
    def fundNotEmpty = getString("Fund is not empty")
    def unhandledResource = getString("warning.unhandled-resource")
    def unknownFormat = getString("Unknown format")
    def noDataStoreSelected = getString("No data store selected")
    def dataStoreWriteError = getString("Could not write data store")
    def dataStoreReadError = getString("Could not read data store")
    def dataStoreEventsReordered = getString("information.datastore-events-reordered")
    def dataStoreCleaned = getString("Cleaned up data store")
    def dataStoreCleanError = getString("Could not cleanup data store")
    def fileReadError = getString("Could not read file")
    def fileWriteError = getString("Could not write file")
    def accountHistoryIssues = getString("warning.account-history.issues")
    def accountHistoryIssuesNAV = getString("warning.account-history.issues.nav")
    def unexpectedIssue = getString("error.unexpected-issue")
  }

}
